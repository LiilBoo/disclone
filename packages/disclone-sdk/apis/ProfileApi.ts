/* tslint:disable */
/* eslint-disable */
/**
 * Disclone Proxy API
 * Basic API proxy for Disclone
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Profile,
  Settings,
  UpdateProfileRequest,
  UpdateSettingsRequest,
} from '../models/index';
import {
    ProfileFromJSON,
    ProfileToJSON,
    SettingsFromJSON,
    SettingsToJSON,
    UpdateProfileRequestFromJSON,
    UpdateProfileRequestToJSON,
    UpdateSettingsRequestFromJSON,
    UpdateSettingsRequestToJSON,
} from '../models/index';

export interface UpdateProfileOperationRequest {
    updateProfileRequest: UpdateProfileRequest;
}

export interface UpdateSettingsOperationRequest {
    updateSettingsRequest: UpdateSettingsRequest;
}

/**
 * 
 */
export class ProfileApi extends runtime.BaseAPI {

    /**
     * Gets a user\'s profile
     */
    async getProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileFromJSON(jsonValue));
    }

    /**
     * Gets a user\'s profile
     */
    async getProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile> {
        const response = await this.getProfileRaw(initOverrides);
        return await response.value();
    }

    /**
     * Gets a user\'s settings
     */
    async getSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Settings>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/profile/settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingsFromJSON(jsonValue));
    }

    /**
     * Gets a user\'s settings
     */
    async getSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Settings> {
        const response = await this.getSettingsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Updates a user\'s profile
     */
    async updateProfileRaw(requestParameters: UpdateProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>> {
        if (requestParameters.updateProfileRequest === null || requestParameters.updateProfileRequest === undefined) {
            throw new runtime.RequiredError('updateProfileRequest','Required parameter requestParameters.updateProfileRequest was null or undefined when calling updateProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/profile`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProfileRequestToJSON(requestParameters.updateProfileRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileFromJSON(jsonValue));
    }

    /**
     * Updates a user\'s profile
     */
    async updateProfile(requestParameters: UpdateProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile> {
        const response = await this.updateProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a user\'s settings
     */
    async updateSettingsRaw(requestParameters: UpdateSettingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Settings>> {
        if (requestParameters.updateSettingsRequest === null || requestParameters.updateSettingsRequest === undefined) {
            throw new runtime.RequiredError('updateSettingsRequest','Required parameter requestParameters.updateSettingsRequest was null or undefined when calling updateSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/profile/settings`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateSettingsRequestToJSON(requestParameters.updateSettingsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingsFromJSON(jsonValue));
    }

    /**
     * Updates a user\'s settings
     */
    async updateSettings(requestParameters: UpdateSettingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Settings> {
        const response = await this.updateSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
