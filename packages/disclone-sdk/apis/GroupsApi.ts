/* tslint:disable */
/* eslint-disable */
/**
 * Disclone Proxy API
 * Basic API proxy for Disclone
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateGroupRequest,
  Group,
  GroupMembers,
  GroupMessages,
  Groups,
  SendMessageToGroupRequest,
} from '../models/index';
import {
    CreateGroupRequestFromJSON,
    CreateGroupRequestToJSON,
    GroupFromJSON,
    GroupToJSON,
    GroupMembersFromJSON,
    GroupMembersToJSON,
    GroupMessagesFromJSON,
    GroupMessagesToJSON,
    GroupsFromJSON,
    GroupsToJSON,
    SendMessageToGroupRequestFromJSON,
    SendMessageToGroupRequestToJSON,
} from '../models/index';

export interface CreateGroupOperationRequest {
    createGroupRequest: CreateGroupRequest;
}

export interface GetGroupRequest {
    id: number;
}

export interface GetGroupMembersRequest {
    id: number;
}

export interface GetGroupMessagesRequest {
    id: number;
}

export interface SendMessageToGroupOperationRequest {
    id: number;
    sendMessageToGroupRequest: SendMessageToGroupRequest;
}

/**
 * 
 */
export class GroupsApi extends runtime.BaseAPI {

    /**
     * Creates a group
     */
    async createGroupRaw(requestParameters: CreateGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Group>> {
        if (requestParameters.createGroupRequest === null || requestParameters.createGroupRequest === undefined) {
            throw new runtime.RequiredError('createGroupRequest','Required parameter requestParameters.createGroupRequest was null or undefined when calling createGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/groups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateGroupRequestToJSON(requestParameters.createGroupRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
    }

    /**
     * Creates a group
     */
    async createGroup(requestParameters: CreateGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Group> {
        const response = await this.createGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a group
     */
    async getGroupRaw(requestParameters: GetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Group>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/groups/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
    }

    /**
     * Gets a group
     */
    async getGroup(requestParameters: GetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Group> {
        const response = await this.getGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a group\'s members
     */
    async getGroupMembersRaw(requestParameters: GetGroupMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupMembers>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGroupMembers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/groups/{id}/members`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupMembersFromJSON(jsonValue));
    }

    /**
     * Gets a group\'s members
     */
    async getGroupMembers(requestParameters: GetGroupMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupMembers> {
        const response = await this.getGroupMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a group\'s messages
     */
    async getGroupMessagesRaw(requestParameters: GetGroupMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupMessages>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGroupMessages.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/groups/{id}/messages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupMessagesFromJSON(jsonValue));
    }

    /**
     * Gets a group\'s messages
     */
    async getGroupMessages(requestParameters: GetGroupMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupMessages> {
        const response = await this.getGroupMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a user\'s groups
     */
    async getGroupsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Groups>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupsFromJSON(jsonValue));
    }

    /**
     * Gets a user\'s groups
     */
    async getGroups(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Groups> {
        const response = await this.getGroupsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Sends a message to a group
     */
    async sendMessageToGroupRaw(requestParameters: SendMessageToGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupMessages>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sendMessageToGroup.');
        }

        if (requestParameters.sendMessageToGroupRequest === null || requestParameters.sendMessageToGroupRequest === undefined) {
            throw new runtime.RequiredError('sendMessageToGroupRequest','Required parameter requestParameters.sendMessageToGroupRequest was null or undefined when calling sendMessageToGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/groups/{id}/messages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendMessageToGroupRequestToJSON(requestParameters.sendMessageToGroupRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupMessagesFromJSON(jsonValue));
    }

    /**
     * Sends a message to a group
     */
    async sendMessageToGroup(requestParameters: SendMessageToGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupMessages> {
        const response = await this.sendMessageToGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
