// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /doc)
	GetDoc(ctx echo.Context) error

	// (GET /groups)
	GetGroups(ctx echo.Context) error

	// (POST /groups/new)
	CreateGroup(ctx echo.Context) error

	// (GET /groups/{id}/)
	GetGroup(ctx echo.Context, id int64) error

	// (GET /groups/{id}/members)
	GetGroupMembers(ctx echo.Context, id int64) error

	// (GET /groups/{id}/messages)
	GetGroupMessages(ctx echo.Context, id int64) error

	// (POST /groups/{id}/messages)
	SendMessageToGroup(ctx echo.Context, id int64) error

	// (POST /login)
	Login(ctx echo.Context) error

	// (POST /logout)
	Logout(ctx echo.Context) error

	// (GET /profile)
	GetProfile(ctx echo.Context) error

	// (PATCH /profile)
	UpdateProfile(ctx echo.Context) error

	// (GET /profile/settings)
	GetSettings(ctx echo.Context) error

	// (PATCH /profile/settings)
	UpdateSettings(ctx echo.Context) error

	// (GET /proxy-api.yaml)
	GetProxy(ctx echo.Context) error

	// (POST /register)
	Register(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDoc converts echo context to params.
func (w *ServerInterfaceWrapper) GetDoc(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDoc(ctx)
	return err
}

// GetGroups converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroups(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGroups(ctx)
	return err
}

// CreateGroup converts echo context to params.
func (w *ServerInterfaceWrapper) CreateGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateGroup(ctx)
	return err
}

// GetGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGroup(ctx, id)
	return err
}

// GetGroupMembers converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroupMembers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGroupMembers(ctx, id)
	return err
}

// GetGroupMessages converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroupMessages(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGroupMessages(ctx, id)
	return err
}

// SendMessageToGroup converts echo context to params.
func (w *ServerInterfaceWrapper) SendMessageToGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SendMessageToGroup(ctx, id)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// Logout converts echo context to params.
func (w *ServerInterfaceWrapper) Logout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Logout(ctx)
	return err
}

// GetProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProfile(ctx)
	return err
}

// UpdateProfile converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateProfile(ctx)
	return err
}

// GetSettings converts echo context to params.
func (w *ServerInterfaceWrapper) GetSettings(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSettings(ctx)
	return err
}

// UpdateSettings converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSettings(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateSettings(ctx)
	return err
}

// GetProxy converts echo context to params.
func (w *ServerInterfaceWrapper) GetProxy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProxy(ctx)
	return err
}

// Register converts echo context to params.
func (w *ServerInterfaceWrapper) Register(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Register(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/doc", wrapper.GetDoc)
	router.GET(baseURL+"/groups", wrapper.GetGroups)
	router.POST(baseURL+"/groups/new", wrapper.CreateGroup)
	router.GET(baseURL+"/groups/:id/", wrapper.GetGroup)
	router.GET(baseURL+"/groups/:id/members", wrapper.GetGroupMembers)
	router.GET(baseURL+"/groups/:id/messages", wrapper.GetGroupMessages)
	router.POST(baseURL+"/groups/:id/messages", wrapper.SendMessageToGroup)
	router.POST(baseURL+"/login", wrapper.Login)
	router.POST(baseURL+"/logout", wrapper.Logout)
	router.GET(baseURL+"/profile", wrapper.GetProfile)
	router.PATCH(baseURL+"/profile", wrapper.UpdateProfile)
	router.GET(baseURL+"/profile/settings", wrapper.GetSettings)
	router.PATCH(baseURL+"/profile/settings", wrapper.UpdateSettings)
	router.GET(baseURL+"/proxy-api.yaml", wrapper.GetProxy)
	router.POST(baseURL+"/register", wrapper.Register)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
