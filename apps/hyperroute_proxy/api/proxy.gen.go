// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /doc)
	GetDoc(ctx echo.Context) error

	// (GET /docs)
	GetDocs(ctx echo.Context) error

	// (GET /groups)
	GetGroups(ctx echo.Context) error

	// (POST /groups)
	CreateGroup(ctx echo.Context) error

	// (GET /groups/{id}/)
	GetGroup(ctx echo.Context, id int64) error

	// (GET /groups/{id}/members)
	GetGroupMembers(ctx echo.Context, id int64) error

	// (GET /groups/{id}/messages)
	GetGroupMessages(ctx echo.Context, id int64) error

	// (POST /groups/{id}/messages)
	SendMessageToGroup(ctx echo.Context, id int64) error

	// (POST /login)
	Login(ctx echo.Context) error

	// (POST /logout)
	Logout(ctx echo.Context) error

	// (GET /profile)
	GetProfile(ctx echo.Context) error

	// (PATCH /profile)
	UpdateProfile(ctx echo.Context) error

	// (GET /profile/settings)
	GetSettings(ctx echo.Context) error

	// (PATCH /profile/settings)
	UpdateSettings(ctx echo.Context) error

	// (GET /proxy-api.yaml)
	GetProxy(ctx echo.Context) error

	// (POST /register)
	Register(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDoc converts echo context to params.
func (w *ServerInterfaceWrapper) GetDoc(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDoc(ctx)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetGroups converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroups(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGroups(ctx)
	return err
}

// CreateGroup converts echo context to params.
func (w *ServerInterfaceWrapper) CreateGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateGroup(ctx)
	return err
}

// GetGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGroup(ctx, id)
	return err
}

// GetGroupMembers converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroupMembers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGroupMembers(ctx, id)
	return err
}

// GetGroupMessages converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroupMessages(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGroupMessages(ctx, id)
	return err
}

// SendMessageToGroup converts echo context to params.
func (w *ServerInterfaceWrapper) SendMessageToGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SendMessageToGroup(ctx, id)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// Logout converts echo context to params.
func (w *ServerInterfaceWrapper) Logout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Logout(ctx)
	return err
}

// GetProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProfile(ctx)
	return err
}

// UpdateProfile converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateProfile(ctx)
	return err
}

// GetSettings converts echo context to params.
func (w *ServerInterfaceWrapper) GetSettings(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSettings(ctx)
	return err
}

// UpdateSettings converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSettings(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateSettings(ctx)
	return err
}

// GetProxy converts echo context to params.
func (w *ServerInterfaceWrapper) GetProxy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProxy(ctx)
	return err
}

// Register converts echo context to params.
func (w *ServerInterfaceWrapper) Register(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Register(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/doc", wrapper.GetDoc)
	router.GET(baseURL+"/docs", wrapper.GetDocs)
	router.GET(baseURL+"/groups", wrapper.GetGroups)
	router.POST(baseURL+"/groups", wrapper.CreateGroup)
	router.GET(baseURL+"/groups/:id/", wrapper.GetGroup)
	router.GET(baseURL+"/groups/:id/members", wrapper.GetGroupMembers)
	router.GET(baseURL+"/groups/:id/messages", wrapper.GetGroupMessages)
	router.POST(baseURL+"/groups/:id/messages", wrapper.SendMessageToGroup)
	router.POST(baseURL+"/login", wrapper.Login)
	router.POST(baseURL+"/logout", wrapper.Logout)
	router.GET(baseURL+"/profile", wrapper.GetProfile)
	router.PATCH(baseURL+"/profile", wrapper.UpdateProfile)
	router.GET(baseURL+"/profile/settings", wrapper.GetSettings)
	router.PATCH(baseURL+"/profile/settings", wrapper.UpdateSettings)
	router.GET(baseURL+"/proxy-api.yaml", wrapper.GetProxy)
	router.POST(baseURL+"/register", wrapper.Register)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"u0N4sWbY+tg3mNV59U8AAAD//6PiBpzGKAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
