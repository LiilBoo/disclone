openapi: "3.0.0"

info:
  version: 0.0.0
  title: Disclone Proxy API
  description: Basic API proxy for Disclone

servers:
  - url: http://localhost:4000

tags:
  - name: auth
    description: Everything related to auth / registration
  - name: profile
    description: User profiles
  - name: groups
    description: Messaging and Group Chats

paths:
  /proxy-api.yaml:
    get:
      operationId: getProxy
      responses:
        default:
          description: returns the proxy API schema
          content:
            application/file:
              schema:
                $ref: '#/components/schemas/AnyValue'
  /doc:
    get:
      operationId: getDoc
      responses:
        default:
          description: get the documentation for proxy api
          content:
            application/html:
              schema:
                $ref: '#/components/schemas/AnyValue'
  /docs:
    get:
      operationId: getDocs
      responses:
        default:
          description: get the documentation for proxy api
          content:
            application/html:
              schema:
                $ref: '#/components/schemas/AnyValue'
  # ACCOUNT
  /auth/login:
    post:
      tags:
        - auth
      description: Logs in a user
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: login response
          headers:
            Set-cookie:
              schema:
                type: string
                example: _user_session_id=abcde12345; Path=/; HttpOnly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
  /auth/logout:
    post:
      tags:
        - auth
      description: Logs out a user
      operationId: logout
      responses:
        '200':
          description: logout response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
  /auth/register:
    post:
      tags:
        - auth
      description: Registers a user
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: register response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
  # PROFILE
  /auth/profile:
    get:
      tags:
        - profile
      description: Gets a user's profile
      operationId: getProfile
      responses:
        '200':
          description: profile response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileGetResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
    patch:
      tags:
        - profile
      description: Updates a user's profile
      operationId: updateProfile
      requestBody:
        required: true
        description: Profile to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: profile response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileUpdateResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
  /auth/profile/settings:
    get:
      tags:
        - profile
      description: Gets a user's settings
      operationId: getSettings
      responses:
        '200':
          description: settings response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
    patch:
      tags:
        - profile
      description: Updates a user's settings
      operationId: updateSettings
      requestBody:
        required: true
        description: Settings to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSettingsRequest'
      responses:
        '200':
          description: settings response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'

  # GROUPS
  /groups:
    get:
      tags:
        - groups
      description: Gets a user's groups
      operationId: getGroups
      responses:
        '200':
          description: groups response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Groups'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
    post:
      tags:
        - groups
      description: Creates a group
      operationId: createGroup
      requestBody:
        required: true
        description: Group to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupRequest'
      responses:
        '200':
          description: group response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
  /groups/{id}/:
    get:
      tags:
        - groups
      description: Gets a group
      operationId: getGroup
      parameters:
        - name: id
          in: path
          description: ID of group to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: group response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
  /groups/{id}/members:
    get:
      tags:
        - groups
      description: Gets a group's members
      operationId: getGroupMembers
      parameters:
        - name: id
          in: path
          description: ID of group to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: group members response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMembers'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
  /groups/{id}/messages:
    get:
      tags:
        - groups
      description: Gets a group's messages
      operationId: getGroupMessages
      parameters:
        - name: id
          in: path
          description: ID of group to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: group messages response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMessages'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
    post:
      tags:
        - groups
      description: Sends a message to a group
      operationId: sendMessageToGroup
      parameters:
        - name: id
          in: path
          description: ID of group to fetch
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        description: Message to send
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageToGroupRequest'
      responses:
        '200':
          description: group messages response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMessages'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'

components:
  schemas:
    ErrorResult:
      type: object
      required:
        - error
      properties:
        status:
          type: integer
          format: int32
        message:
          type: string

    # Data Models
    AnyValue:
      anyOf:
        - type: string
        - type: number
        - type: integer
        - type: boolean
        - type: array
          items: { }
        - type: object
    User:
      type: object
      required:
        - id
        - email
        - username
        - display_name
        - archived
        - created_at
        - updated_at
      properties:
        id:
          type: number
        email:
          type: string
        username:
          type: string
        display_name:
          type: string
        archived:
          type: boolean
        created_at:
          type: string
        updated_at:
          type: string
    Profile:
      type: object
      required:
        - user
        - settings
      properties:
        user:
          $ref: '#/components/schemas/User'
        settings:
          $ref: '#/components/schemas/Settings'
    Settings:
      type: object
      required:
        - enabled
      properties:
        enabled:
          type: boolean
    Group:
      type: object
      required:
        - id
        - name
        - createdAt
        - updatedAt
        - members
      properties:
        id:
          type: string
        name:
          type: string
        members:
          type: array
          items:
            type: string
        createdAt:
          type: string
        updatedAt:
          type: string
    Groups:
      type: object
      required:
        - groups
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/Group'
    GroupMembers:
      type: object
      required:
        - members
      properties:
        members:
          type: array
          items:
            type: object
            required:
              - id
              - username
              - profileImage
              - status
            properties:
              id:
                type: string
              username:
                type: string
              profileImage:
                type: string
              status:
                type: string
    Message:
      type: object
      required:
        - id
        - content
        - createdAt
        - updatedAt
        - userId
      properties:
        id:
          type: string
        content:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        userId:
          type: string
    GroupMessages:
      type: object
      required:
        - messages
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'

    # HTTP Models
    ProfileGetResponse:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/ErrorResult'
        result:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'

    ProfileUpdateResponse:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/ErrorResult'
        result:
          type: object
          properties:
            success:
              type: boolean

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string

    LoginResponse:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/ErrorResult'
        result:
          type: object
          required:
            - user
          properties:
            user:
              $ref: '#/components/schemas/User'

    LogoutResponse:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/ErrorResult'
        result:
          type: object
          required:
            - id
          properties:
            id:
              type: string

    RegisterRequest:
      type: object
      required:
        - email
        - username
        - password
      properties:
        email:
          type: string
        username:
          type: string
        password:
          type: string

    RegisterResponse:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/ErrorResult'
        result:
          type: object
          required:
            - user
            - token
          properties:
            user:
              $ref: '#/components/schemas/User'
            token:
              type: string

    ArchiveRequest:
      type: object
      required:
        - userID
      properties:
        userID:
          type: number

    ArchiveResponse:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/ErrorResult'
        result:
          type: object
          required:
            - userID
          properties:
            userID:
              type: number

    UpdateProfileRequest:
      type: object
      required:
        - display_name
      properties:
        display_name:
          type: string

    UpdateSettingsRequest:
      type: object
      required:
        - enabled
      properties:
        enabled:
          type: boolean

    CreateGroupRequest:
      type: object
      required:
        - name
        - members
      properties:
        name:
          type: string
        members:
          type: array
          items:
            type: string

    SendMessageToGroupRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string

