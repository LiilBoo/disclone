// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package db

import (
	"context"
)

const getUser = `-- name: GetUser :one
SELECT id, provider_id, provider_user_id, email_address, display_name
FROM "user_provider_mapping"
WHERE provider_user_id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, providerUserID string) (UserProviderMapping, error) {
	row := q.db.QueryRow(ctx, getUser, providerUserID)
	var i UserProviderMapping
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.ProviderUserID,
		&i.EmailAddress,
		&i.DisplayName,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO user_provider_mapping (provider_id, provider_user_id, email_address, display_name)
values ($1, $2, $3, $4)
RETURNING id, email_address
`

type InsertUserParams struct {
	ProviderID     string
	ProviderUserID string
	EmailAddress   string
	DisplayName    string
}

type InsertUserRow struct {
	ID           int32
	EmailAddress string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (InsertUserRow, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.ProviderID,
		arg.ProviderUserID,
		arg.EmailAddress,
		arg.DisplayName,
	)
	var i InsertUserRow
	err := row.Scan(&i.ID, &i.EmailAddress)
	return i, err
}
